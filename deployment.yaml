apiVersion: apps/v1
kind: Deployment
metadata:
  name: story-deployment
spec: 
  replicas: 2
  selector:
    matchLabels:
      app: story
  template:
    metadata:
      labels:
        app: story
    spec:
      containers:
        - name: story
          image: amirjfr/kub-data-demo
          imagePullPolicy: Always
          env: # note you could achive the same in docker but we are doing it in k8s deployment this time
            # approach 1:
            # - name: STORY_FOLDER
            #   value: 'story'
            # approach 2:
            - name: STORY_FOLDER
              valueFrom:
                configMapKeyRef:
                  name: data-store-env
                  key: folder
          volumeMounts:
            - mountPath: /app/story
              name: story-volume
      volumes:
        - name: story-volume
          # approach 1:
          # emptyDir: {}  # Pod-specific, erased when pod is deleted
          # approach 2:
          # hostPath: # Shared across pods on the **same node**
          #   path: /data # Path on the host machine (e.g., Minikube VM)
          #   type: DirectoryOrCreate # Creates directory if it doesn't exist
          # approach 3 (Persistent accross all nodes -  independent from pod and node - the best approach)
          persistentVolumeClaim:
            claimName: mypvc
          